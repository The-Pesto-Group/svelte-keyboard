{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "Keyboard.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { createEventDispatcher } from \"svelte\";\n  import keyboardData from \"./data.js\";\n  const dispatch = createEventDispatcher();\n\n  export let data = keyboardData;\n\n  const unique = (arr) => [...new Set(arr)];\n  const rows = unique(data.map((d) => d.row));\n  rows.sort((a, b) => a - b);\n\n  const swaps = {\n    delete:\n      '<svg width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-delete\"><path d=\"M21 4H8l-7 8 7 8h13a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2z\"></path><line x1=\"18\" y1=\"9\" x2=\"12\" y2=\"15\"></line><line x1=\"12\" y1=\"9\" x2=\"18\" y2=\"15\"></line></svg>',\n  };\n\n  $: rowData = rows.map((r) => data.filter((k) => k.row === r));\n  $: maxInRow = Math.max(...rowData.map((r) => r.length));\n  $: percentWidth = `${(1 / maxInRow) * 100}%`;\n\n  function onKey() {\n    const value = this.innerText;\n    dispatch(\"keydown\", value);\n  }\n</script>\n\n<style>\n  .row {\n    display: flex;\n    justify-content: center;\n  }\n\n  button {\n    font-size: 1em;\n    text-align: center;\n    padding: 0.5em;\n    margin: 0.1em;\n    border-radius: 2px;\n    background-color: #efefef;\n    border: none;\n    outline: none;\n    cursor: pointer;\n    line-height: 1;\n    vertical-align: baseline;\n  }\n\n  button:active {\n    transform: scale(2);\n    background-color: #cdcdcd;\n  }\n\n  button.single {\n    padding: 0.5em 0;\n  }\n</style>\n\n<div class=\"keyboard\">\n  {#each rowData as keys}\n    <div class=\"row\">\n      {#each keys as { value }}\n        <button\n          style=\"width: {value.length === 1 ? percentWidth : 'auto'};\"\n          class:single={value.length === 1}\n          on:touchstart={() => dispatch('keydown', value)}\n          on:click={() => dispatch('keydown', value)}>\n          {#if swaps[value]}\n            {@html swaps[value]}\n          {:else}{value}{/if}\n        </button>\n      {/each}\n    </div>\n  {/each}\n</div>\n"
  ],
  "names": [],
  "mappings": "AA2BE,IAAI,eAAC,CAAC,AACJ,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,AACzB,CAAC,AAED,MAAM,eAAC,CAAC,AACN,SAAS,CAAE,GAAG,CACd,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,KAAK,CACd,MAAM,CAAE,KAAK,CACb,aAAa,CAAE,GAAG,CAClB,gBAAgB,CAAE,OAAO,CACzB,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,IAAI,CACb,MAAM,CAAE,OAAO,CACf,WAAW,CAAE,CAAC,CACd,cAAc,CAAE,QAAQ,AAC1B,CAAC,AAED,qBAAM,OAAO,AAAC,CAAC,AACb,SAAS,CAAE,MAAM,CAAC,CAAC,CACnB,gBAAgB,CAAE,OAAO,AAC3B,CAAC,AAED,MAAM,OAAO,eAAC,CAAC,AACb,OAAO,CAAE,KAAK,CAAC,CAAC,AAClB,CAAC"
}